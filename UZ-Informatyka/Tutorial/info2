Materiały do pracy magisterskiej:

Problemy zwiazane ze znajdowaniem najkrotszych sciezek to:

Dzielenie srodowiska po ktorym bedzie poruszal sie obiekt na siatki, tzn. dyskretyzacja

Podstawowym haslem tego problemu jest: Navigation Meshes

Dzielić na siatki można na kilka sposobów: 
(zródło: https://gamedev.stackexchange.com/questions/38721/how-can-i-generate-a-navigation-mesh-for-a-tile-grid)
kopia w pliku infoMesh.docx
"
Use Marching Squares algorithm to convert obstacle tiles into outlines. Note that map edges is an outline too and need to be included as well.
Reduce number of points in outlines using Douglas-Peucker algorithm (purple lines on the bottom picture)
Feed all points into Delaunay triangulation (to get most uniform triangles)
Add additional points in empty areas and along the map edges (to get more even navmesh)
Check along obstacle outlines and flip polygons produced by Delaunay to match outlines. - Often Delaunay could place triangles (grey) mismatching your outlines (red), then you need to detect and flip them. Adjoining them back into a polygon, split it along outline(s) and triangulate it manually enter image description here
Clip obstacles innards - remove polygons that are within obstacles (pink on the picture above)
Fill in connectivity data between remaining triangles and vertices as you need - that's your navmesh.
"


Przykładowa praca magisterska na podobny temat znajduje sie pod tym adresem:
https://www.cs.au.dk/~gerth/advising/thesis/anders-strand-holm-vinther_magnus-strand-holm-vinther.pdf

Kolejnym problem jest postepowanie w przypadku napotykania na ruchome obiekty:
http://theory.stanford.edu/~amitp/GameProgramming/MovingObstacles.html

Optymalizacja moze juz sie odbywac na etapie rysowania grafu na podstawie mapy:
https://www.redblobgames.com/pathfinding/grids/algorithms.html

Opisane w powyzszym linku jest tworzenie waypoints i navigation meshes.

Tutaj opisano wykorzystanie sztucznych sieci neuronowych do znajdowania najkrotszych sciezek, ale
lacznie z tworzeniem grafu i wag na podstawie zdjecia satelitarnego terenu.
https://www.intechopen.com/books/advanced-path-planning-for-mobile-entities/path-planning-in-rough-terrain-using-neural-network-memory

Uzyto dodatkowo sztucznych sieci nauronowych do rozpoznawania terenu i nadawania wag.

Pod tym linkiem pokazano filmik pokazujacy quad tree nodes:

https://www.youtube.com/watch?v=95aHGzzNCY8


"It's an A* (A star) path finding using quad tree nodes. It's incredibly fast."

Prawdopodobnie jest to wazne haslo (quad tree nodes) w tworzeniu grafow do przeszukiwania.

Tutaj jest ladne demo zrobione za pomoca grafiki 3d, pokazano zmieniajace sie warunki np. co sie stanie gdy zamknie sie drzwi lub
gdy obiekty przemieszczaja sie:

https://www.youtube.com/watch?v=hmx1sx6ezQA


Tutaj przedstawiono algorytmy optymalizacji tras przejazdu pojazdow, czesciowo przypomina to badania operacyjne ale wymieniono tez
kilka algorytmow grafowych.

https://docplayer.pl/23816145-Algorytmy-optymalizacji-tras-przejazdu-pojazdow.html


Ciekawym zagadnieniem jest generowanie labiryntów:
https://en.wikipedia.org/wiki/Maze_generation_algorithm

Przyklad lancucha dostaw z uzyciem AI.
https://www.youtube.com/watch?v=w6sC6VyP1O8

Dobra wizualizacja algorytmu wyszukiwania sciezek, powinienem miec podobny program:
https://www.youtube.com/watch?v=19h1g22hby8

Kolejne haslo: Cooperative Pathfinding Demo
https://www.youtube.com/watch?v=B-OoL2bOXl0


Jakis inny sposob wyszukiwania sciezki:
Flowfield Pathfinding
https://www.youtube.com/watch?v=smmQ0ONzs50

https://www.youtube.com/watch?v=N1XXw4KJJrg

Understanding Goal-Based Vector Field Pathfinding

Compare A* with Dijkstra algorithm
https://www.youtube.com/watch?v=g024lzsknDo

https://www.youtube.com/watch?v=Bspb9g9nTto


Zrozumiale przyklady Dijkstra:
https://www.youtube.com/watch?v=gdmfOwyQlcI

https://www.youtube.com/watch?v=pVfj6mxhdMw


Graph Data Structure 6. The A* Pathfinding Algorithm
https://www.youtube.com/watch?v=eSOJ3ARN5FM